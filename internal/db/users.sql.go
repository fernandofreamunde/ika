// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, hashed_password, nickname, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id, created_at, updated_at, hashed_password, nickname, email
`

type CreateUserParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
	Nickname       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.HashedPassword,
		arg.Nickname,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.Nickname,
		&i.Email,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, created_at, updated_at, hashed_password, nickname, email FROM users WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.Nickname,
		&i.Email,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, created_at, updated_at, hashed_password, nickname, email FROM users WHERE id = $1
`

func (q *Queries) FindUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.Nickname,
		&i.Email,
	)
	return i, err
}

const nukeUsers = `-- name: NukeUsers :exec
DELETE FROM users WHERE true
`

func (q *Queries) NukeUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, nukeUsers)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $1, hashed_password = $2, nickname = $3, updated_at = NOW()
WHERE id = $4
RETURNING id, created_at, updated_at, hashed_password, nickname, email
`

type UpdateUserParams struct {
	Email          string
	HashedPassword string
	Nickname       string
	ID             uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.HashedPassword,
		arg.Nickname,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.Nickname,
		&i.Email,
	)
	return i, err
}
