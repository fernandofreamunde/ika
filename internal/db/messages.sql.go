// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, type, content, author_id, chatroom_id, sent_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
RETURNING id, sent_at, updated_at, author_id, chatroom_id, type, content
`

type CreateMessageParams struct {
	ID         uuid.UUID
	Type       string
	Content    sql.NullString
	AuthorID   uuid.NullUUID
	ChatroomID uuid.NullUUID
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.Type,
		arg.Content,
		arg.AuthorID,
		arg.ChatroomID,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SentAt,
		&i.UpdatedAt,
		&i.AuthorID,
		&i.ChatroomID,
		&i.Type,
		&i.Content,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const findMessagesByRoomById = `-- name: FindMessagesByRoomById :one
SELECT id, sent_at, updated_at, author_id, chatroom_id, type, content 
FROM messages
WHERE chatroom_id = $1
ORDER BY sent_at DESC
`

func (q *Queries) FindMessagesByRoomById(ctx context.Context, chatroomID uuid.NullUUID) (Message, error) {
	row := q.db.QueryRowContext(ctx, findMessagesByRoomById, chatroomID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SentAt,
		&i.UpdatedAt,
		&i.AuthorID,
		&i.ChatroomID,
		&i.Type,
		&i.Content,
	)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages
SET content = $1, updated_at = NOW()
WHERE id = $2
RETURNING id, sent_at, updated_at, author_id, chatroom_id, type, content
`

type UpdateMessageParams struct {
	Content sql.NullString
	ID      uuid.UUID
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.Content, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SentAt,
		&i.UpdatedAt,
		&i.AuthorID,
		&i.ChatroomID,
		&i.Type,
		&i.Content,
	)
	return i, err
}
