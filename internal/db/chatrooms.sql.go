// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chatrooms.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const chatroomAddParticipant = `-- name: ChatroomAddParticipant :exec
INSERT INTO chatrooms_participants(chatroom_id, participant_id)
VALUES ($1, $2)
`

type ChatroomAddParticipantParams struct {
	ChatroomID    uuid.NullUUID
	ParticipantID uuid.NullUUID
}

func (q *Queries) ChatroomAddParticipant(ctx context.Context, arg ChatroomAddParticipantParams) error {
	_, err := q.db.ExecContext(ctx, chatroomAddParticipant, arg.ChatroomID, arg.ParticipantID)
	return err
}

const chatroomRemoveParticipant = `-- name: ChatroomRemoveParticipant :exec
DELETE FROM chatrooms_participants
WHERE chatroom_id = $1 AND participant_id = $2
`

type ChatroomRemoveParticipantParams struct {
	ChatroomID    uuid.NullUUID
	ParticipantID uuid.NullUUID
}

func (q *Queries) ChatroomRemoveParticipant(ctx context.Context, arg ChatroomRemoveParticipantParams) error {
	_, err := q.db.ExecContext(ctx, chatroomRemoveParticipant, arg.ChatroomID, arg.ParticipantID)
	return err
}

const createChatroom = `-- name: CreateChatroom :one
INSERT INTO chatrooms (id, type, name, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, created_at, updated_at, type, name
`

type CreateChatroomParams struct {
	ID   uuid.UUID
	Type string
	Name sql.NullString
}

func (q *Queries) CreateChatroom(ctx context.Context, arg CreateChatroomParams) (Chatroom, error) {
	row := q.db.QueryRowContext(ctx, createChatroom, arg.ID, arg.Type, arg.Name)
	var i Chatroom
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Name,
	)
	return i, err
}

const deleteChatroom = `-- name: DeleteChatroom :exec
DELETE FROM chatrooms WHERE id = $1
`

func (q *Queries) DeleteChatroom(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChatroom, id)
	return err
}

const findChatRoomById = `-- name: FindChatRoomById :one
SELECT id, created_at, updated_at, type, name FROM chatrooms WHERE id = $1
`

func (q *Queries) FindChatRoomById(ctx context.Context, id uuid.UUID) (Chatroom, error) {
	row := q.db.QueryRowContext(ctx, findChatRoomById, id)
	var i Chatroom
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Name,
	)
	return i, err
}

const findParticipantIdsByChatRoomId = `-- name: FindParticipantIdsByChatRoomId :many
SELECT chatroom_id, participant_id FROM chatrooms_participants WHERE chatroom_id = $1
`

func (q *Queries) FindParticipantIdsByChatRoomId(ctx context.Context, chatroomID uuid.NullUUID) ([]ChatroomsParticipant, error) {
	rows, err := q.db.QueryContext(ctx, findParticipantIdsByChatRoomId, chatroomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatroomsParticipant
	for rows.Next() {
		var i ChatroomsParticipant
		if err := rows.Scan(&i.ChatroomID, &i.ParticipantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsersChatrooms = `-- name: FindUsersChatrooms :many
SELECT cr.id, cr.created_at, cr.updated_at, cr.type, cr.name FROM chatrooms AS cr 
LEFT JOIN chatrooms_participants AS cp ON cr.id = cp.chatroom_id
WHERE cp.participant_id = $1
`

func (q *Queries) FindUsersChatrooms(ctx context.Context, participantID uuid.NullUUID) ([]Chatroom, error) {
	rows, err := q.db.QueryContext(ctx, findUsersChatrooms, participantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chatroom
	for rows.Next() {
		var i Chatroom
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatroom = `-- name: UpdateChatroom :one
UPDATE chatrooms
SET type = $1, name = $2, updated_at = NOW()
WHERE id = $3
RETURNING id, created_at, updated_at, type, name
`

type UpdateChatroomParams struct {
	Type string
	Name sql.NullString
	ID   uuid.UUID
}

func (q *Queries) UpdateChatroom(ctx context.Context, arg UpdateChatroomParams) (Chatroom, error) {
	row := q.db.QueryRowContext(ctx, updateChatroom, arg.Type, arg.Name, arg.ID)
	var i Chatroom
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Name,
	)
	return i, err
}
